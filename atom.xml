<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BoyGXR Blog</title>
  <icon>https://www.gravatar.com/avatar/2a12800b48aa453c8a2a7a4fab4bfa3b</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://agxr.github.io/"/>
  <updated>2019-03-28T05:54:13.564Z</updated>
  <id>https://agxr.github.io/</id>
  
  <author>
    <name>BoyGXR</name>
    <email>itboygxr520@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sync-to-async</title>
    <link href="https://agxr.github.io/2018/08/22/sync-to-async/"/>
    <id>https://agxr.github.io/2018/08/22/sync-to-async/</id>
    <published>2018-08-22T02:41:29.000Z</published>
    <updated>2019-03-28T05:54:13.564Z</updated>
    
    <content type="html"><![CDATA[<ul><li>写js逻辑的，特别是调api接口时，这个时候请求都是异步处理的，只能等请求完毕才能做接下来的渲染处理，这个时候就设计到如何将异步问题转为同步问题</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一、封装一个callback函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span> (<span class="params">fun, data</span>) </span>&#123;</span><br><span class="line"><span class="comment">//   console.log(data)</span></span><br><span class="line">  <span class="keyword">typeof</span> fun == <span class="string">"function"</span> &amp;&amp; fun(<span class="string">'回调成功'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newData = &#123;</span><br><span class="line">  <span class="string">'key1'</span>: <span class="string">'aaa'</span>,</span><br><span class="line">  <span class="string">'key'</span>: <span class="number">11111</span></span><br><span class="line">&#125;;</span><br><span class="line">callback(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(newData)</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, newData)</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>ES6之Promise</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Promise</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    ajax</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'resolve:请求成功'</span>)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'reject:请求失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;写js逻辑的，特别是调api接口时，这个时候请求都是异步处理的，只能等请求完毕才能做接下来的渲染处理，这个时候就设计到如何将异步问题转为同步问题&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 方法一、封装一个callback函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;callback&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;fun, data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   console.log(data)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fun == &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt; &amp;amp;&amp;amp; fun(&lt;span class=&quot;string&quot;&gt;&#39;回调成功&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newData = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;key1&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;aaa&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;11111&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;callback(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, newData)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="js" scheme="https://agxr.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://agxr.github.io/tags/js/"/>
    
      <category term="callback" scheme="https://agxr.github.io/tags/callback/"/>
    
  </entry>
  
  <entry>
    <title>git冲突</title>
    <link href="https://agxr.github.io/2018/05/10/git-merge/"/>
    <id>https://agxr.github.io/2018/05/10/git-merge/</id>
    <published>2018-05-10T03:24:36.000Z</published>
    <updated>2019-03-28T05:54:13.564Z</updated>
    
    <content type="html"><![CDATA[<h4 id="git操作之解决冲突"><a href="#git操作之解决冲突" class="headerlink" title="git操作之解决冲突"></a>git操作之解决冲突</h4><blockquote><p>使用git pull代码时，经常会碰到有冲突的情况，提示如下信息：  </p></blockquote><blockquote><p>error: Your local changes to ‘c/environ.c’ would be overwritten by merge.  Aborting.<br>Please, commit your changes or stash them before you can merge.  </p></blockquote><blockquote><p>这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。  </p></blockquote><ul><li>1.git stash 的方式解决 –<a href="http://www.01happy.com/git-resolve-conflicts/" target="_blank" rel="noopener">参考博客</a></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// stash--隐藏</span><br><span class="line">1、先将本地修改存储起来</span><br><span class="line">    &gt; $ git stash</span><br><span class="line">  - 这样本地的所有修改就都被暂时存储起来。使用git stash list可以看到保存的信息：</span><br><span class="line">  - 其中stash@&#123;0&#125;就是刚才保存的标记。</span><br><span class="line">2、pull内容  // 暂存了本地修改之后，就可以pull了。</span><br><span class="line">    &gt; $ git pull origin master</span><br><span class="line">3、还原暂存的内容</span><br><span class="line">    &gt; $ git stash pop stash@&#123;0&#125;  或者 git stash pop</span><br><span class="line">  - 系统提示如下类似的信息：</span><br><span class="line">    - Auto-merging c/environ.c</span><br><span class="line">    - CONFLICT (content): Merge conflict <span class="keyword">in</span> c/environ.c</span><br><span class="line">  - 意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。有的需要自己手动更改</span><br><span class="line">4、解决文件中冲突的的部分</span><br><span class="line">  打开冲突的文件，会看到类似如下的内容：</span><br><span class="line">    - 发现文件里出现“&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD”，=======，“&gt;&gt;&gt;&gt;&gt;&gt;&gt; log_id ”等符号，Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同版本的内容，把这些符号都删除</span><br><span class="line">  - 其中&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 和 =====之间的内容是 本地修改的内容，==== 和&gt;&gt;&gt;&gt;&gt;&gt;&gt; log_id 之间的内容就是 pull下来的内容。碰到这种情况，git也不知道哪行内容是需要的，所以要自行确定需要的内容。</span><br><span class="line">  - 解决完成之后，就可以正常的提交了。</span><br><span class="line">5、然后就是正常 git add .; git commit -m <span class="string">"init"</span>; git push origin master等提交操作了</span><br></pre></td></tr></table></figure><ul><li>2.git冲突文件展示  </li></ul><p><img src="http://i63.tinypic.com/i1xsew.jpg" alt="git冲突图"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">发现文件里出现</span><br><span class="line">  “&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD”</span><br><span class="line">    console.log(2222);</span><br><span class="line">  “=======”</span><br><span class="line">    console.log(<span class="string">"test"</span>)</span><br><span class="line">  “&gt;&gt;&gt;&gt;&gt;&gt;&gt; log_id” 等符号，</span><br><span class="line">- Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同版本的内容</span><br><span class="line">- 其中“&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD” 和 “=====”之间的内容是 本地修改的内容，“====” 和“&gt;&gt;&gt;&gt;&gt;&gt;&gt; log_id” 之间的内容就是 pull下来的内容。</span><br><span class="line">- “&lt;&lt;&lt;&lt;&lt;&lt;&lt; ” 与 “=======” 之间的内容为本地内容(<span class="built_in">local</span>)，“=======” 和 “&gt;&gt;&gt;&gt;&gt;&gt;&gt;” 之间的内容为拉取下来的代码(即：仓库里面的代码)</span><br></pre></td></tr></table></figure><ul><li>3.git正常提交冲突后的解决方法</li></ul><blockquote><p>像这样先add等push时有冲突再解决的操作，是为了保证自己修改的本地代码不会消失（已经commit过了），就是担心自己修改的代码因为git误操作在拉取等时候被覆盖而丢失，这样就白干了，所以先commit，等push时有冲突再说。 –大佬这么教育我的  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// git提交代码前，先不拉取内容，直接add</span><br><span class="line">1.先查看本地修改文件的状态</span><br><span class="line">    &gt; git status</span><br><span class="line">2.git添加文件</span><br><span class="line">    &gt; git add -A 或 (git add .) 或 (git add file_name)</span><br><span class="line">3.commit提交</span><br><span class="line">    &gt; git commit -m <span class="string">"描述内容"</span></span><br><span class="line">4.push操作</span><br><span class="line">    &gt; git push origin master  或 (git push origin develop_name)</span><br><span class="line">** 此时如果没有冲突的话就正常提交完毕，可以坐下喝口咖啡压压惊了</span><br><span class="line">** - 但是，然而我们要说的是有冲突的情况给：如果有冲突，则 push 会失败，提示有多种情况，如：</span><br><span class="line">    &gt; $ git push origin develop_name</span><br><span class="line">    To ssh://xxx.xxue.com.cn/xxxxxxx.git</span><br><span class="line">    ! [rejected]        develop_name -&gt; develop_name (non-fast-forward)</span><br><span class="line">    error: failed to push some refs to <span class="string">'ssh://git@source.zhenxue.com.cn/zhenxue-tasks.git'</span></span><br><span class="line">    hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">    hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">    hint: <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">    hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br><span class="line">  或：</span><br><span class="line">    &gt; $ git push origin master</span><br><span class="line">    To https://github.com/xxxx/testgit.git</span><br><span class="line">     ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">    error: failed to push some refs to <span class="string">'https://github.com/Agxr/testgit.git'</span></span><br><span class="line">    hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">    hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">    hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">    hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">    hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br><span class="line">接下来就是解决冲突的操作了</span><br><span class="line">  1）git fetch</span><br><span class="line">  2）git pull origin develop_name (假如你的分支是master，就写master)</span><br><span class="line">- 这个时候可以再git push就好了，但是这里有个问题，就是git pull的时候会自动合并分支，但是不一定一定成功。自动合并需手动改的冲突如下：</span><br><span class="line">    $ git pull origin develop_jixun</span><br><span class="line">    From ssh://source.zhenxue.com.cn/zhenxue-tasks</span><br><span class="line">     * branch            develop_jixun -&gt; FETCH_HEAD</span><br><span class="line">    Auto-merging jixun-admin/js/search-detail.js</span><br><span class="line">    Auto-merging cq-login/js/index.js</span><br><span class="line">    CONFLICT (add/add): Merge conflict <span class="keyword">in</span> cq-login/js/index.js</span><br><span class="line">    Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line">  // CONFLICT (add/add): Merge conflict <span class="keyword">in</span> cq-login/js/index.js。该语句表示这个文件需要手动改</span><br><span class="line">- 或：</span><br><span class="line">    - 我就是遇到这个问题</span><br><span class="line">    CONFLICT (content): Merge conflict <span class="keyword">in</span> register_result.php</span><br><span class="line">    Auto-merging php_fns.php</span><br><span class="line">    CONFLICT (content): Merge conflict <span class="keyword">in</span> php_fns.php</span><br><span class="line">    Auto-merging output_fns.php</span><br><span class="line">    CONFLICT (content): Merge conflict <span class="keyword">in</span> output_fns.php</span><br><span class="line">    Auto-merging item-details.php</span><br><span class="line">    CONFLICT (content): Merge conflict <span class="keyword">in</span> item-details.php</span><br><span class="line">    Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line">  3）your code is here</span><br><span class="line">    &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;/font&gt; HEAD</span><br><span class="line">    another code is here</span><br><span class="line">    =======</span><br><span class="line">    also code is here</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;&gt;&gt; 6853e5fxxxxxxxxxxxxxxxxxx330dcc</span><br><span class="line">    在这里：&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 和 =======之间的文件是你的代码</span><br><span class="line">    ============ 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6853e5fxxxxxxxxxxxxxxxxxx330dcc是别人的代码。</span><br><span class="line">    手动修改好了就行了！！</span><br><span class="line">  4）手动改好后就可以 git add commit push操作了</span><br></pre></td></tr></table></figure><ul><li>4.强制提交就是干</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、强推</span><br><span class="line">    &gt; git push -f</span><br><span class="line">- 即利用强覆盖方式用你本地的代码替代git仓库内的内容。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;git操作之解决冲突&quot;&gt;&lt;a href=&quot;#git操作之解决冲突&quot; class=&quot;headerlink&quot; title=&quot;git操作之解决冲突&quot;&gt;&lt;/a&gt;git操作之解决冲突&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;使用git pull代码时，经常会碰到有冲突的情况，提示如下信息：  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;error: Your local changes to ‘c/environ.c’ would be overwritten by merge.  Aborting.&lt;br&gt;Please, commit your changes or stash them before you can merge.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.git stash 的方式解决 –&lt;a href=&quot;http://www.01happy.com/git-resolve-conflicts/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="git" scheme="https://agxr.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://agxr.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git-learn</title>
    <link href="https://agxr.github.io/2018/05/09/git-learn/"/>
    <id>https://agxr.github.io/2018/05/09/git-learn/</id>
    <published>2018-05-09T02:15:00.000Z</published>
    <updated>2019-03-28T05:54:13.564Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-git参考学习文章："><a href="#1-git参考学习文章：" class="headerlink" title="1.git参考学习文章："></a>1.git参考学习文章：</h4><ul><li>01.廖雪峰的<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000" target="_blank" rel="noopener">git官方网站</a></li><li>02.git多人协作式 git指令操作 及 常见问题—<a href="http://www.cnblogs.com/wufangfang/p/6085767.html" target="_blank" rel="noopener">参考文献</a></li><li>03.使用git克隆指定分支的代码–<a href="http://www.cnblogs.com/nylcy/p/6569284.html" target="_blank" rel="noopener">参考文献</a></li><li>04.git命令－切换分支–<a href="http://blog.csdn.net/u014540717/article/details/54314126" target="_blank" rel="noopener">参考文献</a></li><li>05.<a href="http://www.01happy.com/git-resolve-conflicts/" target="_blank" rel="noopener">使用git pull文件时和本地文件冲突时的解决办法</a></li></ul><a id="more"></a><hr><h4 id="2-自己使用git的一些总结"><a href="#2-自己使用git的一些总结" class="headerlink" title="2.自己使用git的一些总结"></a>2.自己使用git的一些总结</h4><ul><li>1.git创建本地分支并推送到远程仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// git创建本地分支并推送到远程仓库</span><br><span class="line">  git checkout -b development</span><br><span class="line">  git branch -a    // 查看本机和远程全部分支列表</span><br><span class="line">  git push origin development:development</span><br></pre></td></tr></table></figure><ul><li>2.git分支合并操作</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i68.tinypic.com/vsgtmu.jpg" alt="分支合并冲突命令窗口展示" title="">                </div>                <div class="image-caption">分支合并冲突命令窗口展示</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i68.tinypic.com/23m999i.jpg" alt="分支合并冲突文件内容展示" title="">                </div>                <div class="image-caption">分支合并冲突文件内容展示</div>            </figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 例：git将本地development分支合并到远程beta环境【gie merge &lt;branch-name&gt;】</span><br><span class="line">  git checkout beta</span><br><span class="line">  git pull origin beta</span><br><span class="line">  git merge development</span><br><span class="line">  git commit -m <span class="string">''</span></span><br><span class="line">  git push origin beta</span><br><span class="line"></span><br><span class="line">--&gt; 在合并分支时遇到的冲突问题</span><br><span class="line">1.如下命令行窗口信息所示，当前为beta分支，要执行将develop分支内容合并到beta分支，其中 css/mobile.css 文件发生冲突并自动合并时出现了问题，需要手动更改</span><br><span class="line">》 admin@DESKTOP-K2QDGBL MINGW64 /c/MyFiles/testgit (beta)</span><br><span class="line">》 $ git merge develop</span><br><span class="line">》 Auto-merging css/mobile.css</span><br><span class="line">》 CONFLICT (content): Merge conflict <span class="keyword">in</span> css/mobile.css</span><br><span class="line">》 Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line">- 下面时css/mobile.css 文件冲突内容展示</span><br><span class="line">》 body &#123;</span><br><span class="line">》   background-color: <span class="comment">#f00;</span></span><br><span class="line">》 &#125;</span><br><span class="line">》 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">》 p &#123;</span><br><span class="line">》   font-size: 24px;</span><br><span class="line">》 &#125;</span><br><span class="line">》 =======</span><br><span class="line">》 div, h1, h2, h3, h4, h5, h6, p &#123;</span><br><span class="line">》   font-size: 24px;</span><br><span class="line">》 &#125;</span><br><span class="line">》 ul, li &#123;</span><br><span class="line">》   list-style: none;</span><br><span class="line">》 &#125;</span><br><span class="line">》 &gt;&gt;&gt;&gt;&gt;&gt;&gt; develop</span><br><span class="line">》 </span><br><span class="line">其中“&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD” 与 “=======” 之间的内容为当前分支(即：beta分支)的内容，“=======” 和 “&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop” 之间的内容为要合并分支(即：develop分支)的内容</span><br><span class="line">  -- 手动修改需要保存的内容后再正常提交就可以了</span><br></pre></td></tr></table></figure><ul><li>3.git 想在当前分支(beta)基础上恢复另一分支(development)中的某个文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// git 想在当前分支(beta)基础上恢复另一分支(development)中的某个文件</span><br><span class="line">  git checkout development &lt;file-name&gt;</span><br></pre></td></tr></table></figure><p>–同上：git 想在当前分支(develop)合并(或恢复)另一分支(beta)中的某个指定文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// git 想在当前分支(例：develop分支)合并(或恢复)另一分支(例：beta分支)中的某个指定文件(例：README.md文件)</span><br><span class="line">  &gt; $ git checkout beta README.md</span><br></pre></td></tr></table></figure><ul><li>4.取消对文件的修改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 例：某文件的本地修改完全没有必要，取消修改</span><br><span class="line">    git checkout file_name(文件的路径)</span><br></pre></td></tr></table></figure><ul><li>5.git add 添加错文件 撤销</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git add 添加 多余文件 </span><br><span class="line">这样的错误是由于， 有的时候 可能</span><br><span class="line">    git add . （空格+ 点） 表示当前目录所有文件，不小心就会提交其他文件</span><br><span class="line">    git add 如果添加了错误的文件的话</span><br><span class="line"></span><br><span class="line">&gt; 撤销操作</span><br><span class="line">    git status 先看一下add 中的文件 </span><br><span class="line">    git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 </span><br><span class="line">    git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了</span><br></pre></td></tr></table></figure><ul><li>6.git commit 后撤销操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">如果不小心弄错了 git commit 了。 </span><br><span class="line">先使用 </span><br><span class="line">    git <span class="built_in">log</span> 查看节点 </span><br><span class="line">        commit xxxxxxxxxxxxxxxxxxxxxxxxxx </span><br><span class="line">        Merge: </span><br><span class="line">        Author: </span><br><span class="line">        Date:</span><br><span class="line">    (可以看到第一个是我刚刚commit的，此时想要撤销该错误的commit) -&gt; </span><br><span class="line">然后 </span><br><span class="line">    git reset --soft HEAD^   --将最近一次的commit撤销  （不推荐：git reset commit_id）</span><br><span class="line">结束</span><br><span class="line"></span><br><span class="line">PS：还没有 push 也就是 repo upload 的时候</span><br><span class="line">    git reset commit_id （回退到上一个 提交的节点 代码还是原来你修改的） </span><br><span class="line">    git reset –hard commit_id （回退到上一个commit节点， 代码也发生了改变，变成上一次的）</span><br><span class="line">    ***注意：*** 千万的谨慎的用：git reset --hard HEAD，&#123;该指令会将你本地修改的所有文件撤销，活儿就白干了&#125;</span><br></pre></td></tr></table></figure><ul><li>7.git push 添加到远程仓库后的 撤销操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// *1.第一种方法：reset模式， git reset --mixed，即其默认的模式，即git reset 版本号。</span><br><span class="line">  &gt; $ git rest HEAD^</span><br><span class="line">-执行上述操作，git将提交回滚到了上个提交记录, 同时清空了暂存区(也称stage或index，下文用stage代替暂存区)，但是工作区仍然保留，所以git status时，显示时当前工作区相对于当前记录的变动。使用这种模式不用害怕吧，他并不会清除你的工作区，你在撤销前做的任何操作都不会消失。</span><br><span class="line">-此时可以用&gt; git status  查看你更改的操作文件</span><br><span class="line"></span><br><span class="line">// *2.第二种方法：soft模式，git reset --soft 版本号</span><br><span class="line">  &gt; $ git reset --soft HEAD^</span><br><span class="line">-采用这种模式，git不回清除你的stage区，因此，git status时就显示了stage区相对于second commit的变化。此时工作区是clean 的，而stage区则有变化。 </span><br><span class="line">-用&gt; git status  查看你更改的操作文件</span><br><span class="line"></span><br><span class="line">// 3.第三种方式：--hard，git reset --hard 版本号  【需谨慎操作，因为该指令会将工作区，stage区清理干净】</span><br><span class="line"></span><br><span class="line">**综上：</span><br><span class="line">git reset –-soft 不会改变stage区，仅仅将commit回退到了指定的提交</span><br><span class="line">git reset –-mixed 不回改变工作区，但是会用指定的commit覆盖stage 区，之前所有暂存的内容都变为未暂存(即工作区)的状态</span><br><span class="line">git reset –-hard 使用指定的commit的内容覆盖stage区和工作区，即此时工作区和暂存区都是干净的。</span><br></pre></td></tr></table></figure><ul><li>8.git查看commit提交记录详情：git log</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. &gt; git <span class="built_in">log</span>   --查看所有的commit提交记录【按 向下键 来查看更多，按 Q 键退出查看日志】</span><br><span class="line">2. &gt; git <span class="built_in">log</span> -p -2</span><br><span class="line">  -p 选项展开显示每次提交的内容差异，</span><br><span class="line">  用 -2 则仅显示最近的两次更新</span><br><span class="line">3. &gt; git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line">  --<span class="built_in">stat</span>，仅显示简要的增改行数统计</span><br><span class="line">4.查看指定commit hashID的所有修改：</span><br><span class="line">    &gt; git show commitId</span><br><span class="line">5.查看某次commit中具体某个文件的修改：</span><br><span class="line">    &gt; git show commitId fileName</span><br><span class="line">6.查看最新的commit</span><br><span class="line">    &gt; git show</span><br></pre></td></tr></table></figure><ul><li>9.当前的分支落后于线上分支2个提交，应执行&gt; git pull origin 分支名称</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i63.tinypic.com/b9ion8.jpg" alt="git pull 时有可能出现的问题展示" title="">                </div>                <div class="image-caption">git pull 时有可能出现的问题展示</div>            </figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.当前的分支落后于线上分支2个提交，应执行</span><br><span class="line">  &gt; $ git pull origin 分支名称</span><br><span class="line">来拉取代码</span><br><span class="line">2.此时有可能出现上面截图展示的样子，或下面类似语句描述</span><br><span class="line">    》 mer xxxxx   【为黄色字体】</span><br><span class="line">    》 Please enter a commit message to explain why this merge is necessary,</span><br><span class="line">    》 especially <span class="keyword">if</span> it merges an updated upstream into a topic branch.</span><br><span class="line">    》 Lines starting with <span class="string">'#'</span> will be ignored, and an empty message aborts</span><br><span class="line">    》 the commit.</span><br><span class="line">解决方法：git 在pull或者合并分支的时候有时会遇到这个界面。可以不管(直接下面3,4步)，如果要输入解释的话就需要:</span><br><span class="line">  1）按键盘字母 i 进入insert模式</span><br><span class="line">  2）修改最上面那行黄色合并信息,可以不修改</span><br><span class="line">  3）按键盘左上角<span class="string">"Esc"</span></span><br><span class="line">  4）输入<span class="string">":wq"</span>,注意是冒号+wq,按回车键即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-git参考学习文章：&quot;&gt;&lt;a href=&quot;#1-git参考学习文章：&quot; class=&quot;headerlink&quot; title=&quot;1.git参考学习文章：&quot;&gt;&lt;/a&gt;1.git参考学习文章：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;01.廖雪峰的&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;02.git多人协作式 git指令操作 及 常见问题—&lt;a href=&quot;http://www.cnblogs.com/wufangfang/p/6085767.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;03.使用git克隆指定分支的代码–&lt;a href=&quot;http://www.cnblogs.com/nylcy/p/6569284.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;04.git命令－切换分支–&lt;a href=&quot;http://blog.csdn.net/u014540717/article/details/54314126&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;05.&lt;a href=&quot;http://www.01happy.com/git-resolve-conflicts/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用git pull文件时和本地文件冲突时的解决办法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="git" scheme="https://agxr.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://agxr.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>use-setInterval</title>
    <link href="https://agxr.github.io/2018/05/04/how-use-setInterval/"/>
    <id>https://agxr.github.io/2018/05/04/how-use-setInterval/</id>
    <published>2018-05-04T05:42:17.000Z</published>
    <updated>2019-03-28T05:54:13.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文将介绍如何在移动端中正确的使用setInterval"><a href="#本文将介绍如何在移动端中正确的使用setInterval" class="headerlink" title="本文将介绍如何在移动端中正确的使用setInterval"></a>本文将介绍如何在移动端中正确的使用setInterval</h3><ul><li>在正常情况下，使用setInterval就直接利用new Date() 出来的本地时间去进行计时，这在PC端并没有问题，关键是在移动端，特别是ios手机或者safari浏览器中，当当前含有设置setInterval的应用被home切到后台时，这个时候系统机制就将setInterval自动冻结了</li><li>下面给出一篇参考文章——-<a href="https://imququ.com/post/ios-none-freeze-timer.html" target="_blank" rel="noopener">不会被 iOS 停掉的网页定时器</a></li></ul><h3 id="我在项目中使用setInterval的时候，是结合服务器时间-和-本地时间差进行-倒计时计算"><a href="#我在项目中使用setInterval的时候，是结合服务器时间-和-本地时间差进行-倒计时计算" class="headerlink" title="我在项目中使用setInterval的时候，是结合服务器时间 和 本地时间差进行 倒计时计算"></a>我在项目中使用setInterval的时候，是结合服务器时间 和 本地时间差进行 倒计时计算</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：从接口获取服务器时间</span></span><br><span class="line"><span class="keyword">var</span> _self = <span class="keyword">this</span></span><br><span class="line"><span class="comment">// 首先要拿到接口中给出的过期时间 和 请求接口的当前服务器时间， 作差 moreShopDisTime</span></span><br><span class="line">_self.moreShopDisTime = _self.$data.dataList[i].goods3.end_time - _self.$data.dataList[i].goods3.now_time</span><br><span class="line">_self.setTimeEnevt()</span><br><span class="line"><span class="comment">//if (_self.moreShopDisTime &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//    _self.setTimeEnevt()</span></span><br><span class="line"><span class="comment">//&#125; else &#123;</span></span><br><span class="line"><span class="comment">//    _self.moreShopFlag = false</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二步：设置setInterval</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTimeEnevt</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      _self.setGetTime(_self.moreShopDisTime) <span class="comment">// 渲染DOM界面</span></span><br><span class="line">      <span class="keyword">var</span> dateLocal = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()    <span class="comment">// 获取本地时间存储在全局变量</span></span><br><span class="line">      _self.localTime = <span class="built_in">Math</span>.round(dateLocal / <span class="number">1000</span>)  <span class="comment">// 取秒</span></span><br><span class="line">      _self.timeSetIntervalObj = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// setInterval开启</span></span><br><span class="line">        <span class="keyword">var</span> dateLocalTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">        dateLocalTime = <span class="built_in">Math</span>.round(dateLocalTime / <span class="number">1000</span>)   <span class="comment">//局部变量存储本地时间</span></span><br><span class="line">        <span class="keyword">var</span> moreShopServeTime = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ((dateLocalTime - _self.localTime) &lt;= _self.moreShopDisTime) &#123;</span><br><span class="line">          moreShopServeTime = _self.moreShopDisTime - (dateLocalTime - _self.localTime)</span><br><span class="line">          _self.setGetTime(moreShopServeTime)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          _self.moreShopFlag = <span class="literal">false</span></span><br><span class="line">          clearInterval(_self.timeSetIntervalObj)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三步：时间戳格式化</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setGetTime</span> (<span class="params">timess</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> theTime = timess <span class="comment">// 秒</span></span><br><span class="line">      <span class="keyword">var</span> theTime1 = <span class="number">0</span> <span class="comment">// 分</span></span><br><span class="line">      <span class="keyword">var</span> theTime2 = <span class="number">0</span> <span class="comment">// 小时</span></span><br><span class="line">      <span class="keyword">if</span> (theTime &gt; <span class="number">60</span>) &#123;</span><br><span class="line">        theTime1 = <span class="built_in">parseInt</span>(theTime / <span class="number">60</span>)</span><br><span class="line">        theTime = <span class="built_in">parseInt</span>(theTime % <span class="number">60</span>)</span><br><span class="line">        <span class="keyword">if</span> (theTime1 &gt; <span class="number">60</span>) &#123;</span><br><span class="line">          theTime2 = <span class="built_in">parseInt</span>(theTime1 / <span class="number">60</span>)</span><br><span class="line">          theTime1 = <span class="built_in">parseInt</span>(theTime1 % <span class="number">60</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (theTime2 &gt; <span class="number">9</span>) &#123; <span class="comment">// 时</span></span><br><span class="line">        <span class="keyword">this</span>.timeShopHour = theTime2</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theTime2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeShopHour = <span class="string">'0'</span> + theTime2</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeShopHour = <span class="string">'00'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (theTime1 &gt; <span class="number">9</span>) &#123; <span class="comment">// 分</span></span><br><span class="line">        <span class="keyword">this</span>.timeShopMinute = theTime1</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theTime2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeShopMinute = <span class="string">'0'</span> + theTime1</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeShopMinute = <span class="string">'00'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (theTime &gt; <span class="number">9</span>) &#123; <span class="comment">// 秒</span></span><br><span class="line">        <span class="keyword">this</span>.timeShopSecond = theTime</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeShopSecond = <span class="string">'0'</span> + theTime</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeShopSecond = <span class="string">'00'</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文将介绍如何在移动端中正确的使用setInterval&quot;&gt;&lt;a href=&quot;#本文将介绍如何在移动端中正确的使用setInterval&quot; class=&quot;headerlink&quot; title=&quot;本文将介绍如何在移动端中正确的使用setInterval&quot;&gt;&lt;/a&gt;本文将介绍如何在移动端中正确的使用setInterval&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在正常情况下，使用setInterval就直接利用new Date() 出来的本地时间去进行计时，这在PC端并没有问题，关键是在移动端，特别是ios手机或者safari浏览器中，当当前含有设置setInterval的应用被home切到后台时，这个时候系统机制就将setInterval自动冻结了&lt;/li&gt;
&lt;li&gt;下面给出一篇参考文章——-&lt;a href=&quot;https://imququ.com/post/ios-none-freeze-timer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;不会被 iOS 停掉的网页定时器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;我在项目中使用setInterval的时候，是结合服务器时间-和-本地时间差进行-倒计时计算&quot;&gt;&lt;a href=&quot;#我在项目中使用setInterval的时候，是结合服务器时间-和-本地时间差进行-倒计时计算&quot; class=&quot;headerlink&quot; title=&quot;我在项目中使用setInterval的时候，是结合服务器时间 和 本地时间差进行 倒计时计算&quot;&gt;&lt;/a&gt;我在项目中使用setInterval的时候，是结合服务器时间 和 本地时间差进行 倒计时计算&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第一步：从接口获取服务器时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 首先要拿到接口中给出的过期时间 和 请求接口的当前服务器时间， 作差 moreShopDisTime&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_self.moreShopDisTime = _self.$data.dataList[i].goods3.end_time - _self.$data.dataList[i].goods3.now_time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_self.setTimeEnevt()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//if (_self.moreShopDisTime &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    _self.setTimeEnevt()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&amp;#125; else &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    _self.moreShopFlag = false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://agxr.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>use-nodeproxy</title>
    <link href="https://agxr.github.io/2018/05/02/use-nodeproxy/"/>
    <id>https://agxr.github.io/2018/05/02/use-nodeproxy/</id>
    <published>2018-05-02T09:58:25.000Z</published>
    <updated>2019-03-28T05:54:13.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文将介绍用nodejs搭建本地http服务器，并且判断访问接口URL时进行转发，完美解决本地开发时候的跨域问题。"><a href="#本文将介绍用nodejs搭建本地http服务器，并且判断访问接口URL时进行转发，完美解决本地开发时候的跨域问题。" class="headerlink" title="本文将介绍用nodejs搭建本地http服务器，并且判断访问接口URL时进行转发，完美解决本地开发时候的跨域问题。"></a>本文将介绍用nodejs搭建本地http服务器，并且判断访问接口URL时进行转发，完美解决本地开发时候的跨域问题。</h3><ul><li>首先放两篇借用参考文章—-\\参考文章1：<a href="http://www.cnblogs.com/shawn-xie/archive/2013/06/06/3121173.html" target="_blank" rel="noopener">node.js搭建本地http服务器参考了shawn.xie的</a>—————–\\<a href="http://www.jb51.net/article/91627.htm" target="_blank" rel="noopener">参考文章2</a></li></ul><h4 id="项目开始："><a href="#项目开始：" class="headerlink" title="项目开始："></a>项目开始：</h4><ul><li>第一步：npm初始</li></ul><blockquote><p> npm init  </p></blockquote><ul><li>第二步：安装node-http-proxy模块</li></ul><blockquote><p> npm install http-proxy –save-dev  </p></blockquote><a id="more"></a><ul><li>第三步：项目的结构</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./node-proxy-project.png" alt="nodeProxy项目结构" title="">                </div>                <div class="image-caption">nodeProxy项目结构</div>            </figure><ul><li>第四步：proxy.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    url = <span class="built_in">require</span>(<span class="string">'url'</span>),</span><br><span class="line">    path=<span class="built_in">require</span>(<span class="string">'path'</span>),</span><br><span class="line">    fs=<span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>),</span><br><span class="line">    mine=<span class="built_in">require</span>(<span class="string">'./mine'</span>).types;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Create a proxy server with latency</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> proxy = httpProxy.createProxyServer(&#123;</span><br><span class="line">    <span class="comment">//target: 'http://xptest.tianxialashou.com.cn',   //接口地址</span></span><br><span class="line">    target: <span class="string">'https://api.douban.com'</span>,   <span class="comment">// 豆瓣api测试接口地址</span></span><br><span class="line">    <span class="comment">// 下面的设置用于https</span></span><br><span class="line">    <span class="comment">// ssl: &#123;</span></span><br><span class="line">    <span class="comment">//     key: fs.readFileSync('server_decrypt.key', 'utf8'),</span></span><br><span class="line">    <span class="comment">//     cert: fs.readFileSync('server.crt', 'utf8')</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// secure: false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Listen for the `proxyRes` event on `proxy`.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">proxy.on(<span class="string">'proxyRes'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">proxyRes, req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'RAW Response from the target'</span>, <span class="built_in">JSON</span>.stringify(proxyRes.headers, <span class="literal">true</span>, <span class="number">2</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Listen for the `open` event on `proxy`.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">proxy.on(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">proxySocket</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// listen for messages coming FROM the target here</span></span><br><span class="line">  proxySocket.on(<span class="string">'data'</span>, hybiParseAndLogMessage);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Listen for the `close` event on `proxy`.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">proxy.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res, socket, head</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// view disconnected websocket connections</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Client disconnected'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Create your server that makes an operation that waits a while</span></span><br><span class="line"><span class="comment">// and then proxies the request</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="comment">//var realPath = path.join("main-pages", pathname); // 指定根目录</span></span><br><span class="line">    <span class="keyword">var</span> realPath = path.join(<span class="string">"./"</span>, pathname);</span><br><span class="line">    <span class="built_in">console</span>.log(pathname);</span><br><span class="line">    <span class="built_in">console</span>.log(realPath);</span><br><span class="line">    <span class="keyword">var</span> ext = path.extname(realPath);</span><br><span class="line">    ext = ext ? ext.slice(<span class="number">1</span>) : <span class="string">'unknown'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断如果是接口访问，则通过proxy转发</span></span><br><span class="line">    <span class="keyword">if</span>(pathname.match(<span class="regexp">/\/v2\//</span>))&#123;</span><br><span class="line">        <span class="keyword">delete</span> request.headers.host;</span><br><span class="line">        proxy.web(request, response);</span><br><span class="line">        <span class="comment">// response.write("alksjdfklll-----------------------------------?????");</span></span><br><span class="line">        <span class="comment">// response.end();</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs.exists(realPath, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            response.writeHead(<span class="number">404</span>, &#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            response.write(<span class="string">"This request URL "</span> + pathname + <span class="string">" was not found on this server."</span>);</span><br><span class="line">            response.end();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fs.readFile(realPath, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    response.writeHead(<span class="number">500</span>, &#123;</span><br><span class="line">                        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    response.end(err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> contentType = mine[ext] || <span class="string">"text/plain"</span>;</span><br><span class="line">                    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                        <span class="string">'Content-Type'</span>: contentType</span><br><span class="line">                    &#125;);</span><br><span class="line">                    response.write(file, <span class="string">"binary"</span>);</span><br><span class="line">                    response.end();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(PORT);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server runing at port: "</span> + PORT + <span class="string">"."</span>);</span><br></pre></td></tr></table></figure><ul><li>第五步：mine.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by XXX on 2017/9/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.types = &#123;</span><br><span class="line">    <span class="string">"css"</span>: <span class="string">"text/css"</span>,</span><br><span class="line">    <span class="string">"gif"</span>: <span class="string">"image/gif"</span>,</span><br><span class="line">    <span class="string">"html"</span>: <span class="string">"text/html"</span>,</span><br><span class="line">    <span class="string">"ico"</span>: <span class="string">"image/x-icon"</span>,</span><br><span class="line">    <span class="string">"jpeg"</span>: <span class="string">"image/jpeg"</span>,</span><br><span class="line">    <span class="string">"jpg"</span>: <span class="string">"image/jpeg"</span>,</span><br><span class="line">    <span class="string">"js"</span>: <span class="string">"text/javascript"</span>,</span><br><span class="line">    <span class="string">"json"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"pdf"</span>: <span class="string">"application/pdf"</span>,</span><br><span class="line">    <span class="string">"png"</span>: <span class="string">"image/png"</span>,</span><br><span class="line">    <span class="string">"svg"</span>: <span class="string">"image/svg+xml"</span>,</span><br><span class="line">    <span class="string">"swf"</span>: <span class="string">"application/x-shockwave-flash"</span>,</span><br><span class="line">    <span class="string">"tiff"</span>: <span class="string">"image/tiff"</span>,</span><br><span class="line">    <span class="string">"txt"</span>: <span class="string">"text/plain"</span>,</span><br><span class="line">    <span class="string">"wav"</span>: <span class="string">"audio/x-wav"</span>,</span><br><span class="line">    <span class="string">"wma"</span>: <span class="string">"audio/x-ms-wma"</span>,</span><br><span class="line">    <span class="string">"wmv"</span>: <span class="string">"video/x-ms-wmv"</span>,</span><br><span class="line">    <span class="string">"xml"</span>: <span class="string">"text/xml"</span>,</span><br><span class="line">    <span class="string">"woff"</span>: <span class="string">"application/x-woff"</span>,</span><br><span class="line">    <span class="string">"woff2"</span>: <span class="string">"application/x-woff2"</span>,</span><br><span class="line">    <span class="string">"tff"</span>: <span class="string">"application/x-font-truetype"</span>,</span><br><span class="line">    <span class="string">"otf"</span>: <span class="string">"application/x-font-opentype"</span>,</span><br><span class="line">    <span class="string">"eot"</span>: <span class="string">"application/vnd.ms-fontobject"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>第六步：html页面调用ajax</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">"GET"</span>,</span><br><span class="line">  url: <span class="string">"/v2/movie/subject/1764796"</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文将介绍用nodejs搭建本地http服务器，并且判断访问接口URL时进行转发，完美解决本地开发时候的跨域问题。&quot;&gt;&lt;a href=&quot;#本文将介绍用nodejs搭建本地http服务器，并且判断访问接口URL时进行转发，完美解决本地开发时候的跨域问题。&quot; class=&quot;headerlink&quot; title=&quot;本文将介绍用nodejs搭建本地http服务器，并且判断访问接口URL时进行转发，完美解决本地开发时候的跨域问题。&quot;&gt;&lt;/a&gt;本文将介绍用nodejs搭建本地http服务器，并且判断访问接口URL时进行转发，完美解决本地开发时候的跨域问题。&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先放两篇借用参考文章—-\\参考文章1：&lt;a href=&quot;http://www.cnblogs.com/shawn-xie/archive/2013/06/06/3121173.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js搭建本地http服务器参考了shawn.xie的&lt;/a&gt;—————–\\&lt;a href=&quot;http://www.jb51.net/article/91627.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文章2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;项目开始：&quot;&gt;&lt;a href=&quot;#项目开始：&quot; class=&quot;headerlink&quot; title=&quot;项目开始：&quot;&gt;&lt;/a&gt;项目开始：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一步：npm初始&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; npm init  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第二步：安装node-http-proxy模块&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; npm install http-proxy –save-dev  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="node" scheme="https://agxr.github.io/categories/node/"/>
    
    
      <category term="node" scheme="https://agxr.github.io/tags/node/"/>
    
      <category term="node-http-proxy" scheme="https://agxr.github.io/tags/node-http-proxy/"/>
    
  </entry>
  
  <entry>
    <title>browser-sync</title>
    <link href="https://agxr.github.io/2018/05/01/pcFile-phone-see/"/>
    <id>https://agxr.github.io/2018/05/01/pcFile-phone-see/</id>
    <published>2018-05-01T03:38:49.000Z</published>
    <updated>2019-03-28T05:54:13.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文介绍如何在手机上预览pc电脑上的文件"><a href="#本文介绍如何在手机上预览pc电脑上的文件" class="headerlink" title="本文介绍如何在手机上预览pc电脑上的文件"></a>本文介绍如何在手机上预览pc电脑上的文件</h3><ul><li>参考链接—<a href="http://www.browsersync.cn/#install" target="_blank" rel="noopener">Browsersync能让浏览器实时、快速响应您的文件更改，同时在PC、平板、手机等设备下进项调试。</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.全局安装browser-sync</span><br><span class="line">    npm install -g browser-sync</span><br><span class="line">2.打开要执行的项目 (快捷键 <span class="built_in">shift</span>+右键)</span><br><span class="line">    browser-sync start --server -port 3032</span><br><span class="line">这个时候不需要用browser-sync提供的ip，用自己 本机pc的ip + 端口号 + 要访问的文件路径 即可访问，同时也可以在手机上进行访问</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;本文介绍如何在手机上预览pc电脑上的文件&quot;&gt;&lt;a href=&quot;#本文介绍如何在手机上预览pc电脑上的文件&quot; class=&quot;headerlink&quot; title=&quot;本文介绍如何在手机上预览pc电脑上的文件&quot;&gt;&lt;/a&gt;本文介绍如何在手机上预览pc电脑上的文件&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="node" scheme="https://agxr.github.io/categories/node/"/>
    
    
      <category term="js" scheme="https://agxr.github.io/tags/js/"/>
    
      <category term="browser-sync" scheme="https://agxr.github.io/tags/browser-sync/"/>
    
  </entry>
  
  <entry>
    <title>vue-Object.defineProperty</title>
    <link href="https://agxr.github.io/2018/04/26/vue-Object_defineProerty/"/>
    <id>https://agxr.github.io/2018/04/26/vue-Object_defineProerty/</id>
    <published>2018-04-26T02:47:25.000Z</published>
    <updated>2019-03-28T05:54:13.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue中的-Object-defineProperty"><a href="#vue中的-Object-defineProperty" class="headerlink" title="vue中的 Object.defineProperty"></a>vue中的 Object.defineProperty</h3><blockquote><p>我之前写了一篇没什么干货的文章。。并且刨了一个大坑。。<br>今天。。打算来填一天。。并再刨一个。。哈哈<br>不过话说说回来了.看本文之前，，<br>如果不知道Object.defineProperty，还必须看看解析神奇的 Object.defineProperty<br>不得不感慨vue的作者，人长得帅，码写的也好。<br>本文是根据作者源码，摘取出来的  </p></blockquote><ul><li>1.本文将实现什么</li></ul><blockquote><p>正如上一篇许下的承诺一样，本文要实现一个 $wacth </p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">v.$watch(<span class="string">"a"</span>,()=&gt;<span class="built_in">console</span>.log(<span class="string">"哈哈，$watch成功"</span>))</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  v.a = <span class="number">5</span></span><br><span class="line">&#125;,<span class="number">2000</span>) <span class="comment">//打印 哈哈，$watch成功</span></span><br></pre></td></tr></table></figure><blockquote><p>为了帮助大家理清思路。。我们就做最简单的实现。。只考虑对象不考虑数组  </p></blockquote><ul><li>2.实现 observer</li></ul><blockquote><p>思路：我们知道Object.defineProperty的特性了，<br>我们就利用它的set和get。。我们将要observe的对象，<br>通过递归，将它所有的属性，包括子属性的属性，都给加上set和get，<br>这样的话，给这个对象的某个属性赋值，就会触发set。。嗯。。开始吧  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span>  <span class="title">Observer</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.walk(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//递归。。让每个字属性可以observe</span></span><br><span class="line">  walk(value)&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(value).forEach(<span class="function"><span class="params">key</span>=&gt;</span><span class="keyword">this</span>.convert(key,value[key]))</span><br><span class="line">  &#125;</span><br><span class="line">  convert(key, val)&#123;</span><br><span class="line">    defineReactive(<span class="keyword">this</span>.value, key, val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> childOb = observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="params">()</span>=&gt;</span>val,</span><br><span class="line">    set:<span class="function"><span class="params">newVal</span>=&gt;</span> &#123;      </span><br><span class="line">     childOb = observe(newVal)<span class="comment">//如果新赋值的值是个复杂类型。再递归它，加上set/get。。</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">value, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value || <span class="keyword">typeof</span> value !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observer(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码很简单，就给每个属性（包括子属性）都加上get/set，<br>这样的话，这个对象的，有任何赋值，就会触发set方法。。<br>所以，我们是不是应该写一个消息－订阅器呢？这样的话，<br>一触发set方法，我们就发一个通知出来，然后，订阅这个消息的，<br>就会怎样？。。。对咯。。收到消息。。。触发回调。  消息－订阅器</p></blockquote><ul><li>3.消息－订阅器</li></ul><blockquote><p>很简单，我们维护一个数组，，这个数组，就放订阅着，一旦触发notify，<br>订阅者就调用自己的update方法  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = []</span><br><span class="line">  &#125;</span><br><span class="line">  addSub(sub)&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;</span><br><span class="line">  notify()&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">sub</span>=&gt;</span>sub.update())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以，每次set函数，调用的时候，我们是不是应该，触发notify，对吧。所以<br>我们把代码补充完整  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  <span class="keyword">var</span> childOb = observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="params">()</span>=&gt;</span>val,</span><br><span class="line">    set:<span class="function"><span class="params">newVal</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> value =  val</span><br><span class="line">      <span class="keyword">if</span> (newVal === value) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal</span><br><span class="line">      childOb = observe(newVal)</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么问题来了。。谁是订阅者。。对，是Watcher。。一旦 dep.notify()<br>就遍历订阅者，也就是Watcher，并调用他的update()方法  </p></blockquote><ul><li>4.实现一个 Watcher</li></ul><blockquote><p>我们想象这个Watcher，应该用什么东西。update方法，嗯这个毋庸置疑，<br>还有呢，  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.$watch(<span class="string">"a"</span>,()=&gt;<span class="built_in">console</span>.log(<span class="string">"哈哈，$watch成功"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>对表达式（就是那个“a”） 和 回调函数，这是最基本的，所以我们简单写写  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(vm, expOrFn, cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line">    <span class="comment">//此处简化.要区分fuction还是expression,只考虑最简单的expression</span></span><br><span class="line">    <span class="keyword">this</span>.expOrFn = expOrFn</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">  &#125;</span><br><span class="line">  update()&#123;</span><br><span class="line">    <span class="keyword">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">const</span>  value = <span class="keyword">this</span>.get()</span><br><span class="line">    <span class="keyword">if</span>(value !==<span class="keyword">this</span>.value)&#123;</span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  get()&#123;</span><br><span class="line">    <span class="comment">//此处简化。。要区分fuction还是expression</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.vm._data[<span class="keyword">this</span>.expOrFn]</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么问题来了，我们怎样将通过addSub(),将Watcher加进去呢。<br>我们发现var dep = new Dep() 处于闭包当中，<br>我们又发现Watcher的构造函数里会调用this.get<br>所以，我们可以在上面动动手脚，<br>修改一下Object.defineProperty的get要调用的函数，<br>判断是不是Watcher的构造函数调用，如果是，说明他就是这个属性的订阅者<br>果断将他addSub()中去，那问题来了，<br>我怎样判断他是Watcher的this.get调用的，而不是我们普通调用的呢。<br>对，在Dep定义一个全局唯一的变量，跟着思路我们写一下  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  ....省略未改动代码....</span><br><span class="line">  get()&#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">//此处简化。。要区分fuction还是expression</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.vm._data[<span class="keyword">this</span>.expOrFn]</span><br><span class="line">    Dep.target = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样的话，我们只需要在Object.defineProperty的get要调用的函数里，<br>判断有没有值，就知道到底是Watcher 在get，还是我们自己在查看赋值，如果<br>是Watcher的话就addSub(),代码补充一下  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  <span class="keyword">var</span> childOb = observe(val)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 说明这是watch 引起的</span></span><br><span class="line">      <span class="keyword">if</span>(Dep.target)&#123;</span><br><span class="line">        dep.addSub(Dep.target)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    set:<span class="function"><span class="params">newVal</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> value =  val</span><br><span class="line">      <span class="keyword">if</span> (newVal === value) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal</span><br><span class="line">      childOb = observe(newVal)</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后不要忘记，在Dep.js中加上这么一句</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dep.target = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>5.实现一个 Vue</li></ul><blockquote><p>还差一步就大功告成了，我们要把以上代码配合Vue的$watch方法来用，<br>要watch Vue实例的属性，算了，，不要理会我在说什么，，直接看代码吧  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">'../watcher'</span></span><br><span class="line"><span class="keyword">import</span> &#123;observe&#125; <span class="keyword">from</span> <span class="string">"../observer"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (options=&#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">//这里简化了。。其实要merge</span></span><br><span class="line">    <span class="keyword">this</span>.$options=options</span><br><span class="line">    <span class="comment">//这里简化了。。其实要区分的</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">this</span>._data=<span class="keyword">this</span>.$options.data</span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span>=&gt;</span><span class="keyword">this</span>._proxy(key))</span><br><span class="line">    observe(data,<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  $watch(expOrFn, cb, options)&#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(<span class="keyword">this</span>, expOrFn, cb)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _proxy(key) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(self, key, &#123;</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self._data[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">        self._data[key] = val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单。。两件事，observe自己的data，代理自己的data，<br>使访问自己的属性，就是访问子data的属性。。<br>截止到现在，在我们只考虑最简单情况下。。整个流程终于跑通了。。肯定会有<br>很多bug，本文主要目的是展示整个工作流，帮助读者理解。。<br>代码在<a href="https://github.com/georgebbbb...，" target="_blank" rel="noopener">https://github.com/georgebbbb...，</a><br>我是一万个不想展示自己代码。。因为很多槽点，还请见谅\</p><hr><ul><li>参考文章：<a href="https://segmentfault.com/a/1190000004384515" target="_blank" rel="noopener">vue 源码分析之如何实现 observer 和 watcher</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue中的-Object-defineProperty&quot;&gt;&lt;a href=&quot;#vue中的-Object-defineProperty&quot; class=&quot;headerlink&quot; title=&quot;vue中的 Object.defineProperty&quot;&gt;&lt;/a&gt;vue中的 Object.defineProperty&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我之前写了一篇没什么干货的文章。。并且刨了一个大坑。。&lt;br&gt;今天。。打算来填一天。。并再刨一个。。哈哈&lt;br&gt;不过话说说回来了.看本文之前，，&lt;br&gt;如果不知道Object.defineProperty，还必须看看解析神奇的 Object.defineProperty&lt;br&gt;不得不感慨vue的作者，人长得帅，码写的也好。&lt;br&gt;本文是根据作者源码，摘取出来的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.本文将实现什么&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;正如上一篇许下的承诺一样，本文要实现一个 $wacth &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="vue" scheme="https://agxr.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://agxr.github.io/tags/vue/"/>
    
      <category term="Object.defineProperty" scheme="https://agxr.github.io/tags/Object-defineProperty/"/>
    
  </entry>
  
  <entry>
    <title>vue-event</title>
    <link href="https://agxr.github.io/2018/04/25/vue-event/"/>
    <id>https://agxr.github.io/2018/04/25/vue-event/</id>
    <published>2018-04-25T08:35:36.000Z</published>
    <updated>2019-03-28T05:54:13.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文将介绍在使用vue进行项目开发的时候，再给DOM加click之类的事件时，获取DOM事件源"><a href="#本文将介绍在使用vue进行项目开发的时候，再给DOM加click之类的事件时，获取DOM事件源" class="headerlink" title="本文将介绍在使用vue进行项目开发的时候，再给DOM加click之类的事件时，获取DOM事件源"></a>本文将介绍在使用vue进行项目开发的时候，再给DOM加click之类的事件时，获取DOM事件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.vue事件获取事件对象,vue获取事件源</span><br><span class="line">    例：定义一事件 @click=targetEvn(<span class="variable">$event</span>, tag)</span><br><span class="line">    在事件声明 targetEvn(evn, tag) &#123;</span><br><span class="line">        console.log(evn) // evn即表示当前事件</span><br><span class="line">        console.log(evn.target) // evn.target即表示当前事件源，获取该DOM节点进行业务逻辑上的功能开发</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;本文将介绍在使用vue进行项目开发的时候，再给DOM加click之类的事件时，获取DOM事件源&quot;&gt;&lt;a href=&quot;#本文将介绍在使用vue进行项目开发的时候，再给DOM加click之类的事件时，获取DOM事件源&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="vue" scheme="https://agxr.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://agxr.github.io/tags/vue/"/>
    
      <category term="event-object" scheme="https://agxr.github.io/tags/event-object/"/>
    
  </entry>
  
  <entry>
    <title>vue-loading</title>
    <link href="https://agxr.github.io/2018/04/24/vue-loading/"/>
    <id>https://agxr.github.io/2018/04/24/vue-loading/</id>
    <published>2018-04-24T05:30:10.000Z</published>
    <updated>2019-03-28T05:54:13.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue项目加载数据时-loding图"><a href="#vue项目加载数据时-loding图" class="headerlink" title="vue项目加载数据时 loding图"></a>vue项目加载数据时 loding图</h3><ul><li>1.一般项目中，有时候会要求，你在数据请求的时候显示一张gif图片，然后数据加载完后，消失。这个，一般只需要在封装的axios中写入js事件即可。当然，我们首先需要在app.vue中，加入此图片。如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;loading v-show=&quot;fetchLoading&quot;&gt;&lt;/loading&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">  <span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">'./components/common/loading'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'app'</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      ...mapGetters([</span><br><span class="line">        <span class="string">'fetchLoading'</span>,</span><br><span class="line">      ]),</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Loading,</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  #app&#123;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    height: 100%;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><ul><li>2.这里的fetchLoading是存在vuex里面的一个变量。在store/modules/common.js里需要如下定义：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 此js文件用于存储公用的vuex状态 */</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'./../../fetch/api'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./../types.js'</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="comment">// 请求数据时加载状态loading</span></span><br><span class="line">  fetchLoading: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">// 请求数据时加载状态</span></span><br><span class="line">  fetchLoading: <span class="function"><span class="params">state</span> =&gt;</span> state.fetchLoading</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 请求数据时状态loading</span></span><br><span class="line">  FETCH_LOADING(&#123;</span><br><span class="line">    commit</span><br><span class="line">  &#125;, res) &#123;</span><br><span class="line">    commit(types.FETCH_LOADING, res)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// 请求数据时loading</span></span><br><span class="line">  [types.FETCH_LOADING] (state, res) &#123;</span><br><span class="line">    state.fetchLoading = res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.loading组件如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"loading"</span>&gt;</span><br><span class="line">    &lt;img src=<span class="string">"./../../assets/main/running.gif"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'loading'</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .loading&#123;</span></span><br><span class="line"><span class="regexp">    position: fixed;</span></span><br><span class="line"><span class="regexp">    top:0;</span></span><br><span class="line"><span class="regexp">    left:0;</span></span><br><span class="line"><span class="regexp">    z-index:121;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    height: 100%;</span></span><br><span class="line"><span class="regexp">    background: rgba(0,0,0,0.3);</span></span><br><span class="line"><span class="regexp">    display: table-cell;</span></span><br><span class="line"><span class="regexp">    vertical-align: middle;</span></span><br><span class="line"><span class="regexp">    text-align: center;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  .loading img&#123;</span></span><br><span class="line"><span class="regexp">    margin:5rem auto;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><ul><li>4.最后在fetch/api.js里封装的axios里写入判断loading事件即可。如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios的请求时间</span></span><br><span class="line"><span class="keyword">let</span> axiosDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span> (<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.post(url, params)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭  loading图片消失</span></span><br><span class="line">        <span class="keyword">let</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        <span class="keyword">let</span> time = oDate.getTime() - axiosDate.getTime()</span><br><span class="line">        <span class="keyword">if</span> (time &lt; <span class="number">500</span>) time = <span class="number">500</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">'FETCH_LOADING'</span>, <span class="literal">false</span>)</span><br><span class="line">        &#125;, time)</span><br><span class="line">        resolve(response.data)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭  loading图片消失</span></span><br><span class="line">        store.dispatch(<span class="string">'FETCH_LOADING'</span>, <span class="literal">false</span>)</span><br><span class="line">        axiosDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 组件中公共页面请求函数</span></span><br><span class="line">  commonApi (url, params) &#123;</span><br><span class="line">    <span class="keyword">if</span>(stringQuery(<span class="built_in">window</span>.location.href)) &#123;</span><br><span class="line">      store.dispatch(<span class="string">'FETCH_LOADING'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    axiosDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> fetch(url, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考博客：<a href="http://blog.csdn.net/zhaohaixin0418/article/details/73459662" target="_blank" rel="noopener">vue项目加载数据时 loding图— 参考博客文章</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue项目加载数据时-loding图&quot;&gt;&lt;a href=&quot;#vue项目加载数据时-loding图&quot; class=&quot;headerlink&quot; title=&quot;vue项目加载数据时 loding图&quot;&gt;&lt;/a&gt;vue项目加载数据时 loding图&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.一般项目中，有时候会要求，你在数据请求的时候显示一张gif图片，然后数据加载完后，消失。这个，一般只需要在封装的axios中写入js事件即可。当然，我们首先需要在app.vue中，加入此图片。如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;loading v-show=&amp;quot;fetchLoading&amp;quot;&amp;gt;&amp;lt;/loading&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="https://agxr.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://agxr.github.io/tags/vue/"/>
    
      <category term="loading" scheme="https://agxr.github.io/tags/loading/"/>
    
  </entry>
  
  <entry>
    <title>vue-filter</title>
    <link href="https://agxr.github.io/2018/04/23/vue-filter/"/>
    <id>https://agxr.github.io/2018/04/23/vue-filter/</id>
    <published>2018-04-23T05:10:36.000Z</published>
    <updated>2019-03-28T05:54:13.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue自定义的过滤器"><a href="#vue自定义的过滤器" class="headerlink" title="vue自定义的过滤器"></a>vue自定义的过滤器</h3><h5 id="Vue2-全局过滤器（vue-cli）"><a href="#Vue2-全局过滤器（vue-cli）" class="headerlink" title="Vue2 全局过滤器（vue-cli）"></a>Vue2 全局过滤器（vue-cli）</h5><ul><li>1.先看官方简介：当前组件注册</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    orderBy() &#123;</span><br><span class="line">      <span class="comment">// doSomething</span></span><br><span class="line">    &#125;,</span><br><span class="line">    uppercase() &#123;</span><br><span class="line">      <span class="comment">// doSomething</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是我们做项目来说，大部分的过滤器是要全局使用的，不会每每用到就在组件里面去写，嗯，还是抽成全局的会更好些。  </p></blockquote><a id="more"></a><ul><li>2.全局注册：（官网: <a href="https://cn.vuejs.org/v2/api/#filters）" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#filters）</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">Vue.filter(<span class="string">'my-filter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 返回处理后的值</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// getter，返回已注册的过滤器</span></span><br><span class="line"><span class="keyword">var</span> myFilter = Vue.filter(<span class="string">'my-filter'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>当项目所用到的过滤器比较多时，就想试着把所有的方法定义在一个文件里面导出，嗯，毕竟还是有分点层次的。    </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/common/filters/custom.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dateServer = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value.replace(<span class="regexp">/(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)/g</span>, <span class="string">'$1-$2-$3'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; dateServer &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/main.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> custom <span class="keyword">from</span> <span class="string">'./common/filters/custom'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(custom).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  Vue.filter(key, custom[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>然后在其他的.vue 文件中就可愉快地使用这些我们定义好的全局过滤器了  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; time | dateServer &#125;&#125;&lt;<span class="regexp">/p&gt; &lt;!-- 2016-01-01 --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>section&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    data () &#123;</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        time: 20160101</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><hr><ul><li>参考文章：<a href="http://www.cnblogs.com/xiterjia/p/6701324.html" target="_blank" rel="noopener">vue自定义过滤器的参考文献</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue自定义的过滤器&quot;&gt;&lt;a href=&quot;#vue自定义的过滤器&quot; class=&quot;headerlink&quot; title=&quot;vue自定义的过滤器&quot;&gt;&lt;/a&gt;vue自定义的过滤器&lt;/h3&gt;&lt;h5 id=&quot;Vue2-全局过滤器（vue-cli）&quot;&gt;&lt;a href=&quot;#Vue2-全局过滤器（vue-cli）&quot; class=&quot;headerlink&quot; title=&quot;Vue2 全局过滤器（vue-cli）&quot;&gt;&lt;/a&gt;Vue2 全局过滤器（vue-cli）&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;1.先看官方简介：当前组件注册&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  filters: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    orderBy() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// doSomething&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uppercase() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// doSomething&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;但是我们做项目来说，大部分的过滤器是要全局使用的，不会每每用到就在组件里面去写，嗯，还是抽成全局的会更好些。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="vue" scheme="https://agxr.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://agxr.github.io/tags/vue/"/>
    
      <category term="filter" scheme="https://agxr.github.io/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3.x+axios</title>
    <link href="https://agxr.github.io/2018/04/22/vue-cli3-axios/"/>
    <id>https://agxr.github.io/2018/04/22/vue-cli3-axios/</id>
    <published>2018-04-22T04:35:00.000Z</published>
    <updated>2019-03-28T05:54:13.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-cli3-x-axios"><a href="#vue-cli3-x-axios" class="headerlink" title="vue-cli3.x+axios"></a>vue-cli3.x+axios</h3><h5 id="一、安装axios和qs-依赖包"><a href="#一、安装axios和qs-依赖包" class="headerlink" title="一、安装axios和qs 依赖包"></a>一、安装axios和qs 依赖包</h5><blockquote><p>npm install axios –save-dev</p></blockquote><blockquote><p>npm install –save-dev axios vue-axios qs  </p></blockquote><h5 id="二、配置-axios-全局变量"><a href="#二、配置-axios-全局变量" class="headerlink" title="二、配置 axios 全局变量"></a>二、配置 axios 全局变量</h5><ul><li>2-1）在main.js加上依赖的引入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import qs from <span class="string">'qs'</span></span><br><span class="line">import common from <span class="string">'../public/js/common'</span></span><br><span class="line">import Axios from <span class="string">'axios'</span></span><br><span class="line">Vue.prototype.<span class="variable">$http</span> = Axios</span><br><span class="line">Vue.prototype.<span class="variable">$qs</span>=qs</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>2-2）在src根目录创建一个 vue.config.js 的文件，这个是因为 cli-3 和 cli-2 创建项目的结构不同。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js 配置说明</span></span><br><span class="line"><span class="comment">// 这里只列一部分，具体配置惨考文档啊</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// baseUrl  type:&#123;string&#125; default:'/'</span></span><br><span class="line">    <span class="comment">// 将部署应用程序的基本URL</span></span><br><span class="line">    <span class="comment">// 将部署应用程序的基本URL。</span></span><br><span class="line">    <span class="comment">// 默认情况下，Vue CLI假设您的应用程序将部署在域的根目录下。</span></span><br><span class="line">    <span class="comment">// https://www.my-app.com/。如果应用程序部署在子路径上，则需要使用此选项指定子路径。例如，如果您的应用程序部署在https://www.foobar.com/my-app/，集baseUrl到'/my-app/'.</span></span><br><span class="line"></span><br><span class="line">    baseUrl: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'/online/'</span> : <span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// outputDir: 在npm run build时 生成文件的目录 type:string, default:'dist'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// outputDir: 'dist',</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// pages:&#123; type:Object,Default:undfind &#125;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      构建多页面模式的应用程序.每个“页面”都应该有一个相应的JavaScript条目文件。该值应该是一</span></span><br><span class="line"><span class="comment">      个对象，其中键是条目的名称，而该值要么是指定其条目、模板和文件名的对象，要么是指定其条目</span></span><br><span class="line"><span class="comment">      的字符串，</span></span><br><span class="line"><span class="comment">      注意：请保证pages里配置的路径和文件名 在你的文档目录都存在 否则启动服务会报错的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// pages: &#123;</span></span><br><span class="line">    <span class="comment">// index: &#123;</span></span><br><span class="line">    <span class="comment">// entry for the page</span></span><br><span class="line">    <span class="comment">// entry: 'src/index/main.js',</span></span><br><span class="line">    <span class="comment">// the source template</span></span><br><span class="line">    <span class="comment">// template: 'public/index.html',</span></span><br><span class="line">    <span class="comment">// output as dist/index.html</span></span><br><span class="line">    <span class="comment">// filename: 'index.html'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// when using the entry-only string format,</span></span><br><span class="line">    <span class="comment">// template is inferred to be `public/subpage.html`</span></span><br><span class="line">    <span class="comment">// and falls back to `public/index.html` if not found.</span></span><br><span class="line">    <span class="comment">// Output filename is inferred to be `subpage.html`.</span></span><br><span class="line">    <span class="comment">// subpage: 'src/subpage/main.js'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//   lintOnSave：&#123; type:Boolean default:true &#125; 问你是否使用eslint</span></span><br><span class="line">    lintOnSave: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// productionSourceMap：&#123; type:Bollean,default:true &#125; 生产源映射</span></span><br><span class="line">    <span class="comment">// 如果您不需要生产时的源映射，那么将此设置为false可以加速生产构建</span></span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// devServer:&#123;type:Object&#125; 3个属性host,port,https</span></span><br><span class="line">    <span class="comment">// 它支持webPack-dev-server的所有选项</span></span><br><span class="line"></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">8080</span>, <span class="comment">// 端口号</span></span><br><span class="line">        host: <span class="string">'localhost'</span>,</span><br><span class="line">        https: <span class="literal">false</span>, <span class="comment">// https:&#123;type:Boolean&#125;</span></span><br><span class="line">        open: <span class="literal">true</span>, <span class="comment">//配置自动启动浏览器</span></span><br><span class="line">        <span class="comment">// proxy: 'http://localhost:4000' // 配置跨域处理,只有一个代理</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/sell'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://127.0.0.1/sell'</span>,   <span class="comment">// 需要请求的地址</span></span><br><span class="line">                changeOrigin: <span class="literal">true</span>,  <span class="comment">// 是否跨域</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/sell'</span>: <span class="string">'/'</span>  <span class="comment">// 替换target中的请求地址，也就是说，在请求的时候，url用'/proxy'代替'http://ip.taobao.com'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,  <span class="comment">// 配置多个代理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三、用法"><a href="#三、用法" class="headerlink" title="三、用法"></a>三、用法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getData() &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">'/sell/orderMaster/queryOrders'</span>, &#123;</span><br><span class="line">        params: &#123;</span><br><span class="line">            current: <span class="keyword">this</span>.current,</span><br><span class="line">            size: <span class="keyword">this</span>.size</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = self.common.handleData(response.data);</span><br><span class="line">        self.records = data.records;</span><br><span class="line">        self.total = data.total;</span><br><span class="line">        self.current = data.current;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="四、axios-几种用法"><a href="#四、axios-几种用法" class="headerlink" title="四、axios 几种用法"></a>四、axios 几种用法</h5><ul><li>4-1）GET  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Make a request for a user with a given ID</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optionally the request above could also be done as</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>4-2）POST    </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">   firstName: <span class="string">'Fred'</span>,</span><br><span class="line">   lastName: <span class="string">'Flintstone'</span></span><br><span class="line"> &#125;)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(response);</span><br><span class="line"> &#125;)</span><br><span class="line"> .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(error);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ul><li>4-3）通用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>,</span><br><span class="line">  url:<span class="string">'http://bit.ly/2mTM3nY'</span>,</span><br><span class="line">  responseType:<span class="string">'stream'</span></span><br><span class="line">&#125;) .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream(<span class="string">'ada_lovelace.jpg'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>4-4）axios<a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">地址</a></li></ul><h5 id="五、表单提交"><a href="#五、表单提交" class="headerlink" title="五、表单提交"></a>五、表单提交</h5><ul><li>5-1）表单提交用QS</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http(&#123;</span><br><span class="line">    headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>&#125;,</span><br><span class="line">    transformRequest: [<span class="function"><span class="params">data</span> =&gt;</span> self.$qs.stringify(data)],</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: <span class="string">'sell/login'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        userId: self.userInfo.userId,</span><br><span class="line">        password: self.userInfo.password</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    self.$router.push(&#123;<span class="attr">path</span>: <span class="string">'/index'</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>5-2）axios请求加上下面两句</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>&#125;,</span><br><span class="line">transformRequest: [<span class="function"><span class="params">data</span> =&gt;</span> self.$qs.stringify(data)],</span><br></pre></td></tr></table></figure><blockquote><p>转自<a href="https://blog.csdn.net/qq_36306590/article/details/81746897" target="_blank" rel="noopener">vue cli-3 配置axios 跨域请求和表单提交</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue-cli3-x-axios&quot;&gt;&lt;a href=&quot;#vue-cli3-x-axios&quot; class=&quot;headerlink&quot; title=&quot;vue-cli3.x+axios&quot;&gt;&lt;/a&gt;vue-cli3.x+axios&lt;/h3&gt;&lt;h5 id=&quot;一、安装axios和qs-依赖包&quot;&gt;&lt;a href=&quot;#一、安装axios和qs-依赖包&quot; class=&quot;headerlink&quot; title=&quot;一、安装axios和qs 依赖包&quot;&gt;&lt;/a&gt;一、安装axios和qs 依赖包&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;npm install axios –save-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install –save-dev axios vue-axios qs  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;二、配置-axios-全局变量&quot;&gt;&lt;a href=&quot;#二、配置-axios-全局变量&quot; class=&quot;headerlink&quot; title=&quot;二、配置 axios 全局变量&quot;&gt;&lt;/a&gt;二、配置 axios 全局变量&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;2-1）在main.js加上依赖的引入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import qs from &lt;span class=&quot;string&quot;&gt;&#39;qs&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import common from &lt;span class=&quot;string&quot;&gt;&#39;../public/js/common&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import Axios from &lt;span class=&quot;string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.prototype.&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt; = Axios&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.prototype.&lt;span class=&quot;variable&quot;&gt;$qs&lt;/span&gt;=qs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="https://agxr.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://agxr.github.io/tags/vue/"/>
    
      <category term="axios" scheme="https://agxr.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>vue-learn</title>
    <link href="https://agxr.github.io/2018/04/21/vue-learn-document/"/>
    <id>https://agxr.github.io/2018/04/21/vue-learn-document/</id>
    <published>2018-04-21T08:35:36.000Z</published>
    <updated>2019-03-28T05:54:13.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue学习"><a href="#vue学习" class="headerlink" title="vue学习"></a>vue学习</h3><ul><li><p>1.vue-resource获取接口数据的方法，参考：<a href="https://www.cnblogs.com/Juphy/p/7073027.html" target="_blank" rel="noopener">Vue基础知识之vue-resource和axios</a></p></li><li><p>2.vue-cli搭建的架子里面加入mock假数据，<a href="https://www.jianshu.com/p/ccd53488a61b" target="_blank" rel="noopener">参考文章</a></p></li><li><p>3.关于Vue实例的生命周期created和mounted的区别…<a href="http://www.zhimengzhe.com/Javascriptjiaocheng/236707.html" target="_blank" rel="noopener">参考文章</a></p></li><li><p>4.Vue如何使用vue-awesome-swiper实现轮播效果…<a href="https://www.cnblogs.com/zishang91/p/7600006.html" target="_blank" rel="noopener">参考文章</a></p></li></ul><a id="more"></a><ul><li><p>5.<a href="https://www.cnblogs.com/wisewrong/p/6277262.html" target="_blank" rel="noopener">Vue学习借鉴参考文章–爬坑之路</a></p></li><li><p>6.<a href="https://www.jianshu.com/p/f5bbcbd5b4b5" target="_blank" rel="noopener">在vue-cli中使用vue-router及vuex的例子</a></p></li><li><p>7.在vue中使用aixos出现跨域的解决方案—参考文章<a href="http://blog.csdn.net/kirinlau/article/details/78611774" target="_blank" rel="noopener">vue中axios解决跨域问题和拦截器使用</a></p></li><li><p>8.在vue中使用bus，实现非父子组件之间的传参—<a href="https://www.cnblogs.com/place-J-P/p/7586819.html" target="_blank" rel="noopener">参考文章</a>—-||||—-<a href="https://blog.csdn.net/u013034014/article/details/54574989?locationNum=2&amp;fps=1" target="_blank" rel="noopener">vue2.0s中eventBus实现兄弟组件通信</a></p></li><li><p>9.vue中使用webpack打包优化。<a href="https://www.cnblogs.com/kevin2chen/p/6816693.html" target="_blank" rel="noopener">参考文章</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例： 对于单页应用，可以使用bundle-loader异步加载各路由对应的组件（懒加载），尽快显示首屏。</span><br><span class="line">- 在vue-router中，使用``const Foo = () =&gt; import(<span class="string">'./Foo.vue'</span>)``懒加载。</span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'Hello'</span>,</span><br><span class="line">        component: () =&gt; import(<span class="string">'../module/HelloWorld'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/check'</span>,</span><br><span class="line">        name: <span class="string">'check'</span>,</span><br><span class="line">        component: r =&gt; require([<span class="string">'@/pages/spa/module/CheckBox'</span>], r)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vue打包优化的思路：</span><br><span class="line">1.路由懒加载组件</span><br><span class="line">2.把第三方库单独打包出来 WebpackDLLPlugin &amp; WebpackDllReferencePlugin</span><br><span class="line">3.第三方依赖打包出来后走cdn</span><br><span class="line">4.服务器nginx开启gzip</span><br><span class="line">5.可以开启WebpackBundleAnalyzer查看依赖关系针对性进行优化 有些依赖其实是没用上的</span><br></pre></td></tr></table></figure><ul><li><p>10.vue路由的懒加载–<a href="http://www.cnblogs.com/wjunwei/p/9242142.html" target="_blank" rel="noopener">参考文章2</a></p></li><li><p>11.<a href="https://blog.csdn.net/qq_36306590/article/details/81746897" target="_blank" rel="noopener">vue cli-3 配置axios 跨域请求和表单提交</a></p></li><li><p>12.父组件往子组件传参通过props（属性）传参时，在子组件中接受时，可设置默认数值</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"searchInput"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      <span class="built_in">type</span>: String, // 数据类型</span><br><span class="line">      default: <span class="string">"请输入关键字"</span> // 默认值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>13.</li></ul><hr><h3 id="vuex学习"><a href="#vuex学习" class="headerlink" title="vuex学习"></a>vuex学习</h3><ul><li><p>1.vuex的—-<a href="https://blog.csdn.net/u012149969/article/details/80350907" target="_blank" rel="noopener">知识博客</a></p></li><li><p>2.<a href="https://blog.csdn.net/fuck487/article/details/83411856" target="_blank" rel="noopener">vuex namespaced的作用以及使用方式</a></p></li></ul><blockquote><p>vuex namespaced的作用以及使用方式  </p></blockquote><blockquote><p>vuex中的store分模块管理，需要在store的index.js中引入各个模块，为了解决不同模块命名冲突的问题，将不同模块的namespaced:true，之后在不同页面中引入getter、actions、mutations时，需要加上所属的模块名  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、声明分模块的store时加上namespaced:<span class="literal">true</span></span><br><span class="line">    <span class="built_in">export</span> default &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line">      state,</span><br><span class="line">      getters,</span><br><span class="line">      actions,</span><br><span class="line">      mutations</span><br><span class="line">    &#125;</span><br><span class="line">2、使用模块中的mutations、getters、actions时候，要加上模块名，例如使用commint执行mutations时</span><br><span class="line">    &gt; 格式：模块名/模块中的mutations</span><br><span class="line">    &gt; xxx/setUserInfo</span><br><span class="line">    &gt; this.<span class="variable">$store</span>.commit(<span class="string">"userInfo/setUserInfo"</span>,userInfo)</span><br><span class="line">3、获取属性时同样加上模块名</span><br><span class="line">    &gt; 格式：store.state.模块名.模块属性</span><br><span class="line">    &gt; <span class="variable">$store</span>.state.userInfo.userName</span><br></pre></td></tr></table></figure><ul><li>3.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue学习&quot;&gt;&lt;a href=&quot;#vue学习&quot; class=&quot;headerlink&quot; title=&quot;vue学习&quot;&gt;&lt;/a&gt;vue学习&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.vue-resource获取接口数据的方法，参考：&lt;a href=&quot;https://www.cnblogs.com/Juphy/p/7073027.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue基础知识之vue-resource和axios&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.vue-cli搭建的架子里面加入mock假数据，&lt;a href=&quot;https://www.jianshu.com/p/ccd53488a61b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.关于Vue实例的生命周期created和mounted的区别…&lt;a href=&quot;http://www.zhimengzhe.com/Javascriptjiaocheng/236707.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4.Vue如何使用vue-awesome-swiper实现轮播效果…&lt;a href=&quot;https://www.cnblogs.com/zishang91/p/7600006.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue" scheme="https://agxr.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://agxr.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>use-githubPage-hexo</title>
    <link href="https://agxr.github.io/2018/04/13/use-githubpage-hexo/"/>
    <id>https://agxr.github.io/2018/04/13/use-githubpage-hexo/</id>
    <published>2018-04-13T09:29:29.000Z</published>
    <updated>2019-03-28T05:54:13.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文将介绍如何利用hexo脚手架搭建基于github的个人博客"><a href="#本文将介绍如何利用hexo脚手架搭建基于github的个人博客" class="headerlink" title="本文将介绍如何利用hexo脚手架搭建基于github的个人博客"></a>本文将介绍如何利用hexo脚手架搭建基于github的个人博客</h3><h3 id="个人博客搭建之github-hexo"><a href="#个人博客搭建之github-hexo" class="headerlink" title="个人博客搭建之github+hexo"></a>个人博客搭建之github+hexo</h3><h4 id="前篇：准备工作"><a href="#前篇：准备工作" class="headerlink" title="前篇：准备工作"></a>前篇：准备工作</h4><ul><li>项目开始前先确保已安装 nodejs-<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs下载官网</a> 和 git-<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git下载官网</a></li></ul><h4 id="一、github篇"><a href="#一、github篇" class="headerlink" title="一、github篇"></a>一、github篇</h4><ul><li>1.注册github账号</li></ul><a id="more"></a><ul><li>2.新建项目，创建项目名为：username.github.io 【其中username为你github的用户名】，如下图</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://agxr.gitlab.io/save-img/image/github/cereate/github11.jpg" alt="创建username.github.io项目" title="">                </div>                <div class="image-caption">创建username.github.io项目</div>            </figure>  <ul><li>3.创建成功后，点击项目进入到项目里面。选择settings tab栏，下滑找到 github pages ，如下图，然后点击 choose a theme 按钮</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://agxr.gitlab.io/save-img/image/github/cereate/github12.jpg" alt="寻找settings下的 github pages" title="">                </div>                <div class="image-caption">寻找settings下的 github pages</div>            </figure>  <ul><li>4.随意选择一个主题，然后点击 select theme 按钮进入下一步，继续点击 commit changes 按钮，如下图</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://agxr.gitlab.io/save-img/image/github/cereate/github13.jpg" alt="select theme" title="">                </div>                <div class="image-caption">select theme</div>            </figure>  <blockquote><p>commit theme  </p></blockquote><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github14.jpg" alt="commit theme">  </p><ul><li>5.返回到项目里面，继续选择 settings tab栏，下滑到github pages，可以看到此时内容发生了些许变化，点击或者在地址栏地址里面输入：<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 即可预览此时属于你的博客项目</li></ul><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github15.jpg" alt="继续选择settings">  </p><blockquote><p>博客项目预览    </p></blockquote><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github16.jpg" alt="github pages 的主题的博客预览">  </p><h4 id="二、hexo篇"><a href="#二、hexo篇" class="headerlink" title="二、hexo篇"></a>二、hexo篇</h4><ul><li>1.准备，先将上面的github项目clone到本地，然后将里面的文件全部删掉（除.git文件夹外）然后提交，目的就是清空你的username.github.io项目，为接下来的hexo博客文件作准备</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://agxr.gitlab.io/save-img/image/github/cereate/github18.jpg" alt="git提交过程" title="">                </div>                <div class="image-caption">git提交过程</div>            </figure>  <blockquote><p>期间遇到一个push失败问题是因为我有两个github账号，当前git配置和github不对应，因此要现在github该username.github.io项目里面添加合作者  </p></blockquote><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github17.jpg" alt="github项目添加合作者">  </p><ul><li>2.全局安装hexo。$ npm install -g hexo-cli</li></ul><blockquote><p>$ npm install -g hexo-cli  </p></blockquote><ul><li>3.<strong>初始化</strong>hexo博客项目 $ hexo init &lt;folder_name&gt;</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://agxr.gitlab.io/save-img/image/github/cereate/github20.jpg" alt="hexo初始化" title="">                </div>                <div class="image-caption">hexo初始化</div>            </figure> <blockquote><p>到这里停一停，此时将上面生成的初始化hexo文件项目中的所有文件 复制–&gt;粘贴到之前clone到本地的username.github.io项目下，然后  </p></blockquote><ul><li>4.打开cmd或者PowerShell。【win+R键出入cmd回车，然后cd到具体目录下，或者在username.github.io项目根目录下按 shift+鼠标右键选择在此处打开Power’Shell窗口】，输入指令：$ hexo serve</li></ul><blockquote><p>$ hexo serve  </p></blockquote><blockquote><p>等跑起来后打开浏览器，地址栏输入：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>  即可预览hexo博客  </p></blockquote><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github21.jpg" alt="localhost:4000"></p><ul><li>5.将hexo博客项目推到 username.github.io 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大于hexo 3.0的上传到github的方法： </span><br><span class="line">安装部署到github插件依赖</span><br><span class="line">  &gt; $ npm install hexo-deployer-git -–save-dev</span><br></pre></td></tr></table></figure><blockquote><p>然后修改hexo的配置文件 <strong>_config.yml</strong> 【项目根目录下】中的 <strong>deploy</strong> 配置项  </p></blockquote><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github22.jpg" alt="_config.yml配置文件"></p><blockquote><p>然后执行hexo 部署指令 $ hexo deploy -g  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">部署网站。</span><br><span class="line">  &gt; $ hexo deploy -g</span><br><span class="line"></span><br><span class="line">  参数  描述</span><br><span class="line">  -g, --generate  部署之前预先生成静态文件</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://agxr.gitlab.io/save-img/image/github/cereate/github23.jpg" alt="_config.yml配置文件" title="">                </div>                <div class="image-caption">_config.yml配置文件</div>            </figure><blockquote><p>预览username.github.io  </p></blockquote><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github24.jpg" alt="预览username.github.io"></p><h4 id="深造"><a href="#深造" class="headerlink" title="深造"></a>深造</h4><ul><li>1.新建博客文章 $ hexo new [layout] <title></title></li></ul><blockquote><p>$ hexo new [layout] <title>  </title></p></blockquote><ul><li>2.修改博客主题–<a href="https://www.jianshu.com/p/33bc0a0a6e90" target="_blank" rel="noopener">参考文章</a></li></ul><blockquote><p>就是自己选好主题后，将clone到的主题文件夹复制到 themes 文件夹下，然后修改 _config.yml配置文件 中的  theme配置项</p></blockquote><ul><li>3.绑定自己的域名，指向username.github.io –<a href="https://blog.csdn.net/wgshun616/article/details/81019739" target="_blank" rel="noopener">参考文章</a></li></ul><blockquote><p>自己购买的域名的控制台，操作域名管理 –&gt; 域名解析 ，新添加一条 username.github.io 的解析记录   </p></blockquote><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github25.jpg" alt="域名管理"></p><blockquote><p>然后进入username.github.io的项目，选择settings tab栏，找到github pages里面的custom domain 输入你的域名，点击save（保存）按钮，静态会儿然后访问你的域名就直接指向原来的<a href="https://username.github.io，高大上完毕" target="_blank" rel="noopener">https://username.github.io，高大上完毕</a>    </p></blockquote><p><img src="https://agxr.gitlab.io/save-img/image/github/cereate/github26.jpg" alt="github--&gt;custom domain"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文将介绍如何利用hexo脚手架搭建基于github的个人博客&quot;&gt;&lt;a href=&quot;#本文将介绍如何利用hexo脚手架搭建基于github的个人博客&quot; class=&quot;headerlink&quot; title=&quot;本文将介绍如何利用hexo脚手架搭建基于github的个人博客&quot;&gt;&lt;/a&gt;本文将介绍如何利用hexo脚手架搭建基于github的个人博客&lt;/h3&gt;&lt;h3 id=&quot;个人博客搭建之github-hexo&quot;&gt;&lt;a href=&quot;#个人博客搭建之github-hexo&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建之github+hexo&quot;&gt;&lt;/a&gt;个人博客搭建之github+hexo&lt;/h3&gt;&lt;h4 id=&quot;前篇：准备工作&quot;&gt;&lt;a href=&quot;#前篇：准备工作&quot; class=&quot;headerlink&quot; title=&quot;前篇：准备工作&quot;&gt;&lt;/a&gt;前篇：准备工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;项目开始前先确保已安装 nodejs-&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs下载官网&lt;/a&gt; 和 git-&lt;a href=&quot;https://git-scm.com/download/win&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git下载官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;一、github篇&quot;&gt;&lt;a href=&quot;#一、github篇&quot; class=&quot;headerlink&quot; title=&quot;一、github篇&quot;&gt;&lt;/a&gt;一、github篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1.注册github账号&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="github-page" scheme="https://agxr.github.io/tags/github-page/"/>
    
      <category term="hexo" scheme="https://agxr.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://agxr.github.io/2018/03/13/hello-world/"/>
    <id>https://agxr.github.io/2018/03/13/hello-world/</id>
    <published>2018-03-13T09:29:29.000Z</published>
    <updated>2019-03-28T05:54:13.564Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="利用hexo搭建基于github的个人博客"><a href="#利用hexo搭建基于github的个人博客" class="headerlink" title="利用hexo搭建基于github的个人博客"></a>利用hexo搭建基于github的个人博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.安装hexo脚手架</span><br><span class="line">    $ npm install -g hexo-cli</span><br><span class="line">2.利用hexo脚手架生成博客项目</span><br><span class="line">    $ hexo init &lt;ProjectName&gt;</span><br><span class="line">    $ <span class="built_in">cd</span> &lt;ProjectName&gt;</span><br><span class="line">    $ npm install</span><br><span class="line">3.本地运行hexo项目.启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span><br><span class="line">    $ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动服务器。默认情况下，访问网址为： http://localhost:4000/</span><br><span class="line">    $ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">生成静态文件。</span><br><span class="line">    $ hexo generate</span><br><span class="line">    缩写 $ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">部署网站。</span><br><span class="line">    $ hexo deploy</span><br><span class="line">    缩写 $ hexo d</span><br></pre></td></tr></table></figure><ul><li>hexo d 失败的可能原因</li></ul><blockquote><p>安装依赖包： npm install hexo-deployer-git –save<br>重新执行： $ hexo deploy 即可  </p></blockquote><blockquote><p>并行指令生成静态文件 + 部署网站<br><strong>$ hexo g &amp;&amp; hexo d</strong></p></blockquote><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;利用hexo搭建基于github的个人博客&quot;&gt;&lt;a href=&quot;#利用hexo搭建基于github的个人博客&quot; class=&quot;headerlink&quot; title=&quot;利用hexo搭建基于github的个人博客&quot;&gt;&lt;/a&gt;利用hexo搭建基于github的个人博客&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.安装hexo脚手架&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.利用hexo脚手架生成博客项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ hexo init &amp;lt;ProjectName&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &amp;lt;ProjectName&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.本地运行hexo项目.启动服务器。默认情况下，访问网址为： http://localhost:4000/。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hello word" scheme="https://agxr.github.io/categories/hello-word/"/>
    
    
      <category term="Hello Word" scheme="https://agxr.github.io/tags/Hello-Word/"/>
    
  </entry>
  
</feed>
